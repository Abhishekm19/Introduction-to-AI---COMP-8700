{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO6l/OF96DNCyUR7CTiCD5q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abhishekm19/Introduction-to-AI---COMP-8700/blob/main/Assignment%20Qs%20-%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "utfe1QyDlKZr"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "\n",
        "def is_attacking(board):\n",
        "    for i in range(7):\n",
        "        for j in range(i + 1, 8):\n",
        "            if (board[i] == board[j] or\n",
        "               board[i] + i == board[j] + j or\n",
        "               board[i] - i == board[j] - j):\n",
        "                return True\n",
        "    return False\n",
        "\n",
        "def random_board():\n",
        "    return [random.randint(0, 7) for _ in range(8)]\n",
        "\n",
        "def steepest_ascent_hill_climbing():\n",
        "    board = random_board()\n",
        "    steps = 0\n",
        "\n",
        "    while steps < 100:  # Limit to avoid infinite loops\n",
        "        if not is_attacking(board):\n",
        "            return steps\n",
        "        best_board = board[:]\n",
        "        best_heuristic = float('inf')\n",
        "        for col in range(8):\n",
        "            for row in range(8):\n",
        "                if board[col] != row:\n",
        "                    new_board = board[:]\n",
        "                    new_board[col] = row\n",
        "                    heuristic = 0\n",
        "                    for i in range(8):\n",
        "                        for j in range(i + 1, 8):\n",
        "                            if new_board[i] == new_board[j] or new_board[i] + i == new_board[j] + j or new_board[i] - i == new_board[j] - j:\n",
        "                                heuristic += 1\n",
        "                    if heuristic < best_heuristic:\n",
        "                        best_board = new_board\n",
        "                        best_heuristic = heuristic\n",
        "        if best_heuristic >= is_attacking(board):\n",
        "            return steps\n",
        "        board = best_board\n",
        "        steps += 1\n",
        "    return steps\n",
        "\n",
        "success_count = 0\n",
        "success_steps = 0\n",
        "failure_count = 0\n",
        "failure_steps = 0\n"
      ]
    }
  ]
}